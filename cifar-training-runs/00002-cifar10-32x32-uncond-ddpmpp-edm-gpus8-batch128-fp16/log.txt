Loading dataset...
Constructing network...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Input shape: torch.Size([16, 3, 32, 32])
/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py:166: UserWarning: ComplexHalf support is experimental and many operators don't support it yet. (Triggered internally at ../aten/src/ATen/EmptyTensor.cpp:31.)
  x_ft = torch.fft.rfft2(x)
Out shape at block 0_conv: torch.Size([16, 128, 32, 32])
Out shape at block 0_block0: torch.Size([16, 128, 32, 32])
Out shape at block 0_block1: torch.Size([16, 128, 32, 32])
Out shape at block 0_block2: torch.Size([16, 128, 32, 32])
Out shape at block 0_block3: torch.Size([16, 128, 32, 32])
Out shape at block 1_down: torch.Size([16, 128, 16, 16])
Out shape at block 1_block0: torch.Size([16, 256, 16, 16])
Out shape at block 1_block1: torch.Size([16, 256, 16, 16])
Out shape at block 1_block2: torch.Size([16, 256, 16, 16])
Out shape at block 1_block3: torch.Size([16, 256, 16, 16])
Out shape at block 2_down: torch.Size([16, 256, 8, 8])
Out shape at block 2_block0: torch.Size([16, 256, 8, 8])
Out shape at block 2_block1: torch.Size([16, 256, 8, 8])
Out shape at block 2_block2: torch.Size([16, 256, 8, 8])
Out shape at block 2_block3: torch.Size([16, 256, 8, 8])
Out shape at block 3_down: torch.Size([16, 256, 4, 4])
Out shape at block 3_block0: torch.Size([16, 256, 4, 4])
Out shape at block 3_block1: torch.Size([16, 256, 4, 4])
Out shape at block 3_block2: torch.Size([16, 256, 4, 4])
Out shape at block 3_block3: torch.Size([16, 256, 4, 4])
Out shape at block 3_in0: torch.Size([16, 256, 4, 4])
Out shape at block 3_in1: torch.Size([16, 256, 4, 4])
Out shape at block 3_block0: torch.Size([16, 256, 4, 4])
Out shape at block 3_block1: torch.Size([16, 256, 4, 4])
Out shape at block 3_block2: torch.Size([16, 256, 4, 4])
Out shape at block 3_block3: torch.Size([16, 256, 4, 4])
Out shape at block 3_block4: torch.Size([16, 256, 4, 4])
Out shape at block 2_up: torch.Size([16, 256, 8, 8])
Out shape at block 2_block0: torch.Size([16, 256, 8, 8])
Out shape at block 2_block1: torch.Size([16, 256, 8, 8])
Out shape at block 2_block2: torch.Size([16, 256, 8, 8])
Out shape at block 2_block3: torch.Size([16, 256, 8, 8])
Out shape at block 2_block4: torch.Size([16, 256, 8, 8])
Traceback (most recent call last):
  File "/mnt/nvme/home/alex/repos/diffusion/edm/train.py", line 247, in <module>
    main()
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/click/core.py", line 1130, in __call__
    return self.main(*args, **kwargs)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/click/core.py", line 1055, in main
    rv = self.invoke(ctx)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/click/core.py", line 1404, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/click/core.py", line 760, in invoke
    return __callback(*args, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/train.py", line 242, in main
    training_loop.training_loop(**c)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/training_loop.py", line 82, in training_loop
    misc.print_module_summary(net, [images, sigma, labels], max_nesting=2)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/torch_utils/misc.py", line 216, in print_module_summary
    outputs = module(*inputs)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1212, in _call_impl
    result = forward_call(*input, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py", line 542, in forward
    F_x = self.model((c_in * x).to(dtype), c_noise.flatten(), class_labels=class_labels, **model_kwargs)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1212, in _call_impl
    result = forward_call(*input, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py", line 499, in forward
    x = block(x, emb)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1212, in _call_impl
    result = forward_call(*input, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py", line 298, in forward
    x = self.conv0(silu(self.norm0(x)))
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1212, in _call_impl
    result = forward_call(*input, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py", line 206, in forward
    spectral_out = self.spectral_conv(x) if self.use_spectral else 0
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1212, in _call_impl
    result = forward_call(*input, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py", line 175, in forward
    out_ft[:, :, :self.modes1, :self.modes2] = self.compl_mul2d(x_ft[:, :, :self.modes1, :self.modes2], w1)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py", line 148, in compl_mul2d
    return torch.einsum("bixyt,ioxyt->boxyt", input, weights)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/torch/functional.py", line 378, in einsum
    return _VF.einsum(equation, operands)  # type: ignore[attr-defined]
RuntimeError: einsum(): subscript y has size 9 for operand 1 which does not broadcast with previously seen size 5
