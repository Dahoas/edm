Loading dataset...
Constructing network...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Input has shape: torch.Size([8, 3, 256, 256])
Has nan: False
/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py:166: UserWarning: ComplexHalf support is experimental and many operators don't support it yet. (Triggered internally at ../aten/src/ATen/EmptyTensor.cpp:31.)
  x_ft = torch.fft.rfft2(x)
Spatial out nan: False, Spectral out nan: False
Out shape at block 0_conv: torch.Size([8, 128, 256, 256])
Has nan: False
Spatial out nan: False, Spectral out nan: False
Spatial out nan: False, Spectral out nan: True
Out shape at block 0_block0: torch.Size([8, 128, 256, 256])
Has nan: True
Spatial out nan: True, Spectral out nan: True
Spatial out nan: True, Spectral out nan: True
Out shape at block 0_block1: torch.Size([8, 128, 256, 256])
Has nan: True
Spatial out nan: True, Spectral out nan: True
Spatial out nan: True, Spectral out nan: True
Out shape at block 0_block2: torch.Size([8, 128, 256, 256])
Has nan: True
Spatial out nan: True, Spectral out nan: True
Spatial out nan: True, Spectral out nan: True
Out shape at block 0_block3: torch.Size([8, 128, 256, 256])
Has nan: True
Spatial out nan: True, Spectral out nan: True
Spatial out nan: True, Spectral out nan: True
Out shape at block 1_down: torch.Size([8, 128, 128, 128])
Has nan: True
Spatial out nan: True, Spectral out nan: True
Spatial out nan: True, Spectral out nan: True
Out shape at block 1_block0: torch.Size([8, 256, 128, 128])
Has nan: True
Spatial out nan: True, Spectral out nan: True
Spatial out nan: True, Spectral out nan: True
Out shape at block 1_block1: torch.Size([8, 256, 128, 128])
Has nan: True
Spatial out nan: True, Spectral out nan: True
Spatial out nan: True, Spectral out nan: True
Out shape at block 1_block2: torch.Size([8, 256, 128, 128])
Has nan: True
Spatial out nan: True, Spectral out nan: True
Spatial out nan: True, Spectral out nan: True
Out shape at block 1_block3: torch.Size([8, 256, 128, 128])
Has nan: True
Spatial out nan: True, Spectral out nan: True
Spatial out nan: True, Spectral out nan: True
Out shape at block 2_down: torch.Size([8, 256, 64, 64])
Has nan: True
Spatial out nan: True, Spectral out nan: True
Spatial out nan: True, Spectral out nan: True
Out shape at block 2_block0: torch.Size([8, 256, 64, 64])
Has nan: True
Spatial out nan: True, Spectral out nan: True
Spatial out nan: True, Spectral out nan: True
Out shape at block 2_block1: torch.Size([8, 256, 64, 64])
Has nan: True
Spatial out nan: True, Spectral out nan: True
Spatial out nan: True, Spectral out nan: True
Out shape at block 2_block2: torch.Size([8, 256, 64, 64])
Has nan: True
Spatial out nan: True, Spectral out nan: True
Spatial out nan: True, Spectral out nan: True
Out shape at block 2_block3: torch.Size([8, 256, 64, 64])
Has nan: True
Traceback (most recent call last):
  File "/mnt/nvme/home/alex/repos/diffusion/edm/train.py", line 247, in <module>
    main()
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/click/core.py", line 1130, in __call__
    return self.main(*args, **kwargs)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/click/core.py", line 1055, in main
    rv = self.invoke(ctx)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/click/core.py", line 1404, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/click/core.py", line 760, in invoke
    return __callback(*args, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/train.py", line 242, in main
    training_loop.training_loop(**c)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/training_loop.py", line 82, in training_loop
    misc.print_module_summary(net, [images, sigma, labels], max_nesting=2)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/torch_utils/misc.py", line 216, in print_module_summary
    outputs = module(*inputs)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1212, in _call_impl
    result = forward_call(*input, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py", line 547, in forward
    F_x = self.model((c_in * x).to(dtype), c_noise.flatten(), class_labels=class_labels, **model_kwargs)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1212, in _call_impl
    result = forward_call(*input, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py", line 488, in forward
    x = block(x, emb) if isinstance(block, DualUNetBlock) else block(x)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1212, in _call_impl
    result = forward_call(*input, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py", line 299, in forward
    x = self.conv0(silu(self.norm0(x)))
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1212, in _call_impl
    result = forward_call(*input, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py", line 207, in forward
    print("Spatial out nan: {}, Spectral out nan: {}".format(torch.any(spatial_out.isnan()), torch.any(spectral_out.isnan())))
AttributeError: 'int' object has no attribute 'isnan'
