Loading datasets...
Constructing network...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Initializing fourier layer...
Input has shape: torch.Size([8, 3, 32, 32])
Has nan: False
Out shape at block 0_conv: torch.Size([8, 128, 32, 32])
Has nan: False
Spec conv input, weights:  torch.Size([8, 128, 32, 32]) torch.Size([128, 128, 16, 9, 2])
out_ft shape: torch.Size([8, 128, 32, 17, 2])
Spectral out x shape: torch.Size([8, 128, 32, 32])
Spatial out nan: False, Spectral out nan: False
Spec conv input, weights:  torch.Size([8, 128, 32, 32]) torch.Size([128, 128, 16, 9, 2])
out_ft shape: torch.Size([8, 128, 32, 17, 2])
Spectral out x shape: torch.Size([8, 128, 32, 32])
Spatial out nan: False, Spectral out nan: False
Out shape at block 0_block0: torch.Size([8, 128, 32, 32])
Has nan: False
Spec conv input, weights:  torch.Size([8, 128, 32, 32]) torch.Size([128, 128, 16, 9, 2])
out_ft shape: torch.Size([8, 128, 32, 17, 2])
Spectral out x shape: torch.Size([8, 128, 32, 32])
Spatial out nan: False, Spectral out nan: False
Spec conv input, weights:  torch.Size([8, 128, 32, 32]) torch.Size([128, 128, 16, 9, 2])
out_ft shape: torch.Size([8, 128, 32, 17, 2])
Spectral out x shape: torch.Size([8, 128, 32, 32])
Spatial out nan: False, Spectral out nan: False
Out shape at block 0_block1: torch.Size([8, 128, 32, 32])
Has nan: False
Spec conv input, weights:  torch.Size([8, 128, 32, 32]) torch.Size([128, 128, 16, 9, 2])
out_ft shape: torch.Size([8, 128, 32, 17, 2])
Spectral out x shape: torch.Size([8, 128, 32, 32])
Spatial out nan: False, Spectral out nan: False
Spec conv input, weights:  torch.Size([8, 128, 32, 32]) torch.Size([128, 128, 16, 9, 2])
out_ft shape: torch.Size([8, 128, 32, 17, 2])
Spectral out x shape: torch.Size([8, 128, 32, 32])
Spatial out nan: False, Spectral out nan: False
Out shape at block 0_block2: torch.Size([8, 128, 32, 32])
Has nan: False
Spec conv input, weights:  torch.Size([8, 128, 32, 32]) torch.Size([128, 128, 16, 9, 2])
out_ft shape: torch.Size([8, 128, 32, 17, 2])
Spectral out x shape: torch.Size([8, 128, 32, 32])
Spatial out nan: False, Spectral out nan: False
Spec conv input, weights:  torch.Size([8, 128, 32, 32]) torch.Size([128, 128, 16, 9, 2])
out_ft shape: torch.Size([8, 128, 32, 17, 2])
Spectral out x shape: torch.Size([8, 128, 32, 32])
Spatial out nan: False, Spectral out nan: False
Out shape at block 0_block3: torch.Size([8, 128, 32, 32])
Has nan: False
Spec conv input, weights:  torch.Size([8, 128, 32, 32]) torch.Size([128, 128, 8, 5, 2])
out_ft shape: torch.Size([8, 128, 16, 9, 2])
Spectral out x shape: torch.Size([8, 128, 16, 16])
Spatial out nan: False, Spectral out nan: False
Spec conv input, weights:  torch.Size([8, 128, 16, 16]) torch.Size([128, 128, 8, 5, 2])
out_ft shape: torch.Size([8, 128, 16, 9, 2])
Spectral out x shape: torch.Size([8, 128, 16, 16])
Spatial out nan: False, Spectral out nan: False
Out shape at block 1_down: torch.Size([8, 128, 16, 16])
Has nan: False
Spec conv input, weights:  torch.Size([8, 128, 16, 16]) torch.Size([128, 256, 8, 5, 2])
out_ft shape: torch.Size([8, 256, 16, 9, 2])
Spectral out x shape: torch.Size([8, 256, 16, 16])
Spatial out nan: False, Spectral out nan: False
Spec conv input, weights:  torch.Size([8, 256, 16, 16]) torch.Size([256, 256, 8, 5, 2])
out_ft shape: torch.Size([8, 256, 16, 9, 2])
Spectral out x shape: torch.Size([8, 256, 16, 16])
Spatial out nan: False, Spectral out nan: False
Out shape at block 1_block0: torch.Size([8, 256, 16, 16])
Has nan: False
Spec conv input, weights:  torch.Size([8, 256, 16, 16]) torch.Size([256, 256, 8, 5, 2])
out_ft shape: torch.Size([8, 256, 16, 9, 2])
Spectral out x shape: torch.Size([8, 256, 16, 16])
Spatial out nan: False, Spectral out nan: False
Spec conv input, weights:  torch.Size([8, 256, 16, 16]) torch.Size([256, 256, 8, 5, 2])
out_ft shape: torch.Size([8, 256, 16, 9, 2])
Spectral out x shape: torch.Size([8, 256, 16, 16])
Spatial out nan: False, Spectral out nan: False
Out shape at block 1_block1: torch.Size([8, 256, 16, 16])
Has nan: False
Spec conv input, weights:  torch.Size([8, 256, 16, 16]) torch.Size([256, 256, 8, 5, 2])
out_ft shape: torch.Size([8, 256, 16, 9, 2])
Spectral out x shape: torch.Size([8, 256, 16, 16])
Spatial out nan: False, Spectral out nan: False
Spec conv input, weights:  torch.Size([8, 256, 16, 16]) torch.Size([256, 256, 8, 5, 2])
out_ft shape: torch.Size([8, 256, 16, 9, 2])
Spectral out x shape: torch.Size([8, 256, 16, 16])
Spatial out nan: False, Spectral out nan: False
Out shape at block 1_block2: torch.Size([8, 256, 16, 16])
Has nan: False
Spec conv input, weights:  torch.Size([8, 256, 16, 16]) torch.Size([256, 256, 8, 5, 2])
out_ft shape: torch.Size([8, 256, 16, 9, 2])
Spectral out x shape: torch.Size([8, 256, 16, 16])
Spatial out nan: False, Spectral out nan: False
Spec conv input, weights:  torch.Size([8, 256, 16, 16]) torch.Size([256, 256, 8, 5, 2])
out_ft shape: torch.Size([8, 256, 16, 9, 2])
Spectral out x shape: torch.Size([8, 256, 16, 16])
Spatial out nan: False, Spectral out nan: False
Out shape at block 1_block3: torch.Size([8, 256, 16, 16])
Has nan: False
Spec conv input, weights:  torch.Size([8, 256, 16, 16]) torch.Size([256, 256, 4, 3, 2])
out_ft shape: torch.Size([8, 256, 8, 5, 2])
Spectral out x shape: torch.Size([8, 256, 8, 8])
Spatial out nan: False, Spectral out nan: False
Spec conv input, weights:  torch.Size([8, 256, 8, 8]) torch.Size([256, 256, 4, 3, 2])
out_ft shape: torch.Size([8, 256, 8, 5, 2])
Spectral out x shape: torch.Size([8, 256, 8, 8])
Spatial out nan: False, Spectral out nan: False
Out shape at block 2_down: torch.Size([8, 256, 8, 8])
Has nan: False
Spec conv input, weights:  torch.Size([8, 256, 8, 8]) torch.Size([256, 256, 4, 3, 2])
out_ft shape: torch.Size([8, 256, 8, 5, 2])
Spectral out x shape: torch.Size([8, 256, 8, 8])
Spatial out nan: False, Spectral out nan: False
Spec conv input, weights:  torch.Size([8, 256, 8, 8]) torch.Size([256, 256, 4, 3, 2])
out_ft shape: torch.Size([8, 256, 8, 5, 2])
Spectral out x shape: torch.Size([8, 256, 8, 8])
Spatial out nan: False, Spectral out nan: False
Out shape at block 2_block0: torch.Size([8, 256, 8, 8])
Has nan: False
Spec conv input, weights:  torch.Size([8, 256, 8, 8]) torch.Size([256, 256, 4, 3, 2])
out_ft shape: torch.Size([8, 256, 8, 5, 2])
Spectral out x shape: torch.Size([8, 256, 8, 8])
Spatial out nan: False, Spectral out nan: False
Spec conv input, weights:  torch.Size([8, 256, 8, 8]) torch.Size([256, 256, 4, 3, 2])
out_ft shape: torch.Size([8, 256, 8, 5, 2])
Spectral out x shape: torch.Size([8, 256, 8, 8])
Spatial out nan: False, Spectral out nan: False
Out shape at block 2_block1: torch.Size([8, 256, 8, 8])
Has nan: False
Spec conv input, weights:  torch.Size([8, 256, 8, 8]) torch.Size([256, 256, 4, 3, 2])
out_ft shape: torch.Size([8, 256, 8, 5, 2])
Spectral out x shape: torch.Size([8, 256, 8, 8])
Spatial out nan: False, Spectral out nan: False
Spec conv input, weights:  torch.Size([8, 256, 8, 8]) torch.Size([256, 256, 4, 3, 2])
out_ft shape: torch.Size([8, 256, 8, 5, 2])
Spectral out x shape: torch.Size([8, 256, 8, 8])
Spatial out nan: False, Spectral out nan: False
Out shape at block 2_block2: torch.Size([8, 256, 8, 8])
Has nan: False
Spec conv input, weights:  torch.Size([8, 256, 8, 8]) torch.Size([256, 256, 4, 3, 2])
out_ft shape: torch.Size([8, 256, 8, 5, 2])
Spectral out x shape: torch.Size([8, 256, 8, 8])
Spatial out nan: False, Spectral out nan: False
Spec conv input, weights:  torch.Size([8, 256, 8, 8]) torch.Size([256, 256, 4, 3, 2])
out_ft shape: torch.Size([8, 256, 8, 5, 2])
Spectral out x shape: torch.Size([8, 256, 8, 8])
Spatial out nan: False, Spectral out nan: False
Out shape at block 2_block3: torch.Size([8, 256, 8, 8])
Has nan: False
Spatial out nan: False, Spectral out nan: False
Spatial out nan: False, Spectral out nan: False
Out shape at block 3_down: torch.Size([8, 256, 4, 4])
Has nan: False
Spatial out nan: False, Spectral out nan: False
Spatial out nan: False, Spectral out nan: False
Out shape at block 3_block0: torch.Size([8, 256, 4, 4])
Has nan: False
Spatial out nan: False, Spectral out nan: False
Spatial out nan: False, Spectral out nan: False
Out shape at block 3_block1: torch.Size([8, 256, 4, 4])
Has nan: False
Spatial out nan: False, Spectral out nan: False
Spatial out nan: False, Spectral out nan: False
Out shape at block 3_block2: torch.Size([8, 256, 4, 4])
Has nan: False
Spatial out nan: False, Spectral out nan: False
Spatial out nan: False, Spectral out nan: False
Out shape at block 3_block3: torch.Size([8, 256, 4, 4])
Has nan: False
out_h:  None out_w:  None
Spatial out nan: False, Spectral out nan: False
Spatial out nan: False, Spectral out nan: False
Out shape at block 3_in0: torch.Size([8, 256, 4, 4])
Has nan: False
out_h:  None out_w:  None
Spatial out nan: False, Spectral out nan: False
Spatial out nan: False, Spectral out nan: False
Out shape at block 3_in1: torch.Size([8, 256, 4, 4])
Has nan: False
out_h:  None out_w:  None
Spatial out nan: False, Spectral out nan: False
Spatial out nan: False, Spectral out nan: False
Out shape at block 3_block0: torch.Size([8, 256, 4, 4])
Has nan: False
out_h:  None out_w:  None
Spatial out nan: False, Spectral out nan: False
Spatial out nan: False, Spectral out nan: False
Out shape at block 3_block1: torch.Size([8, 256, 4, 4])
Has nan: False
out_h:  None out_w:  None
Spatial out nan: False, Spectral out nan: False
Spatial out nan: False, Spectral out nan: False
Out shape at block 3_block2: torch.Size([8, 256, 4, 4])
Has nan: False
out_h:  None out_w:  None
Spatial out nan: False, Spectral out nan: False
Spatial out nan: False, Spectral out nan: False
Out shape at block 3_block3: torch.Size([8, 256, 4, 4])
Has nan: False
out_h:  None out_w:  None
Spatial out nan: False, Spectral out nan: False
Spatial out nan: False, Spectral out nan: False
Out shape at block 3_block4: torch.Size([8, 256, 4, 4])
Has nan: False
out_h:  [4, 4] out_w:  None
Traceback (most recent call last):
  File "/mnt/nvme/home/alex/repos/diffusion/edm/train.py", line 240, in <module>
    main()
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/click/core.py", line 1130, in __call__
    return self.main(*args, **kwargs)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/click/core.py", line 1055, in main
    rv = self.invoke(ctx)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/click/core.py", line 1404, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/click/core.py", line 760, in invoke
    return __callback(*args, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/train.py", line 235, in main
    training_loop.training_loop(**c)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/training_loop.py", line 89, in training_loop
    misc.print_module_summary(net, [images, sigma, labels], max_nesting=2)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/torch_utils/misc.py", line 216, in print_module_summary
    outputs = module(*inputs)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1212, in _call_impl
    result = forward_call(*input, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py", line 566, in forward
    F_x = self.model((c_in * x).to(dtype), c_noise.flatten(), class_labels=class_labels, **model_kwargs)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1212, in _call_impl
    result = forward_call(*input, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py", line 523, in forward
    x = block(x, emb, out_h=out_h, out_w=out_w)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1212, in _call_impl
    result = forward_call(*input, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py", line 313, in forward
    x = self.conv0(silu(self.norm0(x)), out_h=out_h, out_w=out_w)
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1212, in _call_impl
    result = forward_call(*input, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py", line 216, in forward
    spatial_out = self.spatial_conv(x, out_h=out_h, out_w=out_w) if self.use_spatial else 0
  File "/mnt/nvme/home/alex/.envs/diffusion/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1212, in _call_impl
    result = forward_call(*input, **kwargs)
  File "/mnt/nvme/home/alex/repos/diffusion/edm/training/networks.py", line 76, in forward
    out_pad = 0 if out_h is None else out_h % 2  # Odd targets need output padding
TypeError: unsupported operand type(s) for %: 'list' and 'int'
